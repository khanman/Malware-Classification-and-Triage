#! /usr/bin/env python
# coding=utf8

import scipy.spatial
from scipy import *
import scipy.cluster
import numpy as np
import json
import matplotlib.pyplot as plt
import scipy.cluster.hierarchy
import sys
from scipy.cluster.hierarchy import *
list_of_lists = []

with open(sys.argv[1]) as f:
    for line in f:
        inner_list = [int(elt.strip()) for elt in line.split(',')]
	#print inner_list        
	list_of_lists.append(inner_list)
a = np.array(list_of_lists)
a = a.astype(np.double)
distMat = scipy.spatial.distance.pdist(a,'jaccard')
clusters = scipy.cluster.hierarchy.linkage(distMat, method='average')
F = scipy.cluster.hierarchy.fclusterdata(a, 0.4, criterion='distance', metric='jaccard',method='average')
L = leaders(clusters,F)
T = scipy.cluster.hierarchy.to_tree( clusters , rd=False )

def search(x,nodeid):
    if(x.get_id() == nodeid):
	return x
    v = None
    if(x.right != None):
	v = search(x.right,nodeid)
    if(x.left != None) and (v == None):
	v = search(x.left,nodeid)
    return v

def getchild(x):
    if x.is_leaf():
       return [x]
    childern = []
    if x.right != None:
	childern.extend(getchild(x.right))
    if x.left != None:
	childern.extend(getchild(x.left))
    return childern	

l = len(list_of_lists)
labels = []
for i in range(l):
    s = str(i).zfill(4)
    labels.append(s)
id2name = dict(zip(range(len(labels)), labels))
clustersList = []
for nodeid in L[0]:
    y = search(T,nodeid)
    childern = getchild(y)
    l = []
    for child in childern:
	if child.is_leaf():
		l.append(id2name[child.get_id()])
    clustersList.append(l)
clustersDict = {}
clustersDict["clusters"] = clustersList
print json.dumps(clustersDict, indent=4)
json.dump(clustersDict,open("cluster-set.json", "w"), indent=4)


#plt.figure(dpi=100) 
#scipy.cluster.hierarchy.dendrogram(clusters,orientation='right')
#plt.show()

