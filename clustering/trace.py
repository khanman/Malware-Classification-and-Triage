#! /usr/bin/env python
# coding=utf8

import sys
import subprocess
import json
from pprint import pprint
import time
import re
import hashlib
import datetime,time,os,signal

def runCommandWithTimeOut(cmd,timeOut):
    cmdStart = datetime.datetime.now()
    #print "Command is : ",cmd
    p = subprocess.Popen(cmd,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    #out,error = p.communicate()
    while p.poll() is None:
        #print "Sleeping for 0.1 secs"
        time.sleep(0.1)
        now = datetime.datetime.now()
        if (now - cmdStart).seconds > timeOut:
            #print "Killing process : ",cmd
            os.kill(p.pid,signal.SIGTERM)
            #os.waitpid(-1,os.WNOHANG)
            return None
    #out,err = p.communicate()
    return

def main():
    print "---------------------------"
    print "      Analyzing Strace        "
    print "---------------------------"

    lines = open("/usr/local/share/samples.json","r")
    #print " Lines: ",lines.readline()
    j = json.loads(lines.readline())
    straceFiles = []
    for i in j['samples']:
      #    print i['path'],"   ", i['args']
        args = ["strace","-f","-o",i['path']+".strace", "/home/adjacentmonitor/prset07/samples/"+i['path']]
        args.extend(i['args'])
        #Invoke method to run command with timeout
        runCommandWithTimeOut(args,0.5)
        #time.sleep(10)
        #p.stdin.write("^D")
        #print "outttttttt",out
        #print "errrrrrrrr", err, "path",i["path"]
        straceFiles.append(i['path']+".strace")

    #Open strace files and put filter the functions
    globalSet = []
    sfileDict = {}
    #eliminated = []
    #considered = []
    #ignored = []
    for f in straceFiles:
        with open(f,'r') as fh:
            for line in fh:
                line = line.strip()
                if re.match('^[\d]+\s[\w]+.*[\w]*\(("[/\w]+.*[\w]*".*)\)|^[\d]+\s[\w]+.*[\w]*\(\s*\)',line):
                    #print "Considered  : ",line
                    tokens = re.split(r'[(,)]',line.split()[1])
                    func = tokens[0]+tokens[1]
                    h = hash(func)
                    #print "HashValue : ",h
                    globalSet.append(h)
                    if sfileDict.has_key(f):
                        sfileDict[f].append(h)
                    else:
                        temp = [h]
                        sfileDict[f] = temp

    gSet = map(lambda x: x,set(globalSet))
    print "Total number of hash : ",len(gSet)
    featuresDict = {}
    #Create a featuresDict for strace file output
    for key,val in sfileDict.iteritems():
        #Always first time insertion into the dict
        #Setting feature values to zero initially
        featuresDict[key] = [0 for x in range(len(gSet))]
        for item in set(val):
            #Item should always exist in the gSet
            featuresDict[key][gSet.index(item)] = 1
    featuresFile = open("configuration.txt","w")

    for key,val in sorted(featuresDict.iteritems()):
	flag = 0
        line = ""
        for s in val:
	    if flag == 0:
		line += str(s)
		flag = 1
	    else:
		line += ","+str(s)
	featuresFile.write(str(line+"\n"))
    featuresFile.close()

if __name__ == "__main__":
    main()
